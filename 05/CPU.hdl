// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
		
		// when the MSB is 0, load instruction into the a-register -----------------
		// A(t) = A(t-1)
		Not(in=instruction[15], out=nin15);
		And(a=instruction[5], b=instruction[15], out=load-alu-out); // load alu-out into a-reg
		Or(a=load-alu-out, b=nin15, out=load-a-reg);
		Mux16(a=instruction, b=alu-out, sel=instruction[15], out=a-register-in);
		ARegister(in=a-register-in, load=load-a-reg, out=a-register-out);
		// -----------------------------------

		// Load values into ALU --------------
		ALU(x=d-register-out, y=alu-in, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu-out, zr=zr, ng=ng);
		DRegister(in=alu-out, load=instruction[4], out=d-register-out);
		Mux16(a=a-register-out, b=inM, sel=instruction[12], out=alu-in);
		// -----------------------------------

		// writing to memory  -------------
		Or16(a=alu-out, b=alu-out, out=outM);
		// make sure the instruction is a value ant not microcode
		And(a=instruction[15], b=instruction[3], out=writeM);  // determines writeM
		And16(a=a-register-out, b=a-register-out, out[0..14]=addressM, out[15]=nothing); 
		// ----------------------------------

// logic for each jump command --------------------------------------------------------
		
		Not(in=instruction[0], out=nin0);
		Not(in=instruction[1], out=nin1);
		Not(in=instruction[2], out=nin2);

		And(a=instruction[0], b=nin1, out=jmp-greater-than-tmp0); // jmp if greater than zero
		And(a=jmp-greater-than-tmp0, b=nin2, out=jmp-greater-than-tmp1);
		Or(a=zr, b=ng, out=zr-ng);
		Not(in=zr-ng, out=nzr-nng);
		And(a=jmp-greater-than-tmp1, b=nzr-nng, out=jmp-greater-than);
		
		And(a=nin0, b=instruction[1], out=jmp-equal-tmp0); // jmp if equal to zero
		And(a=jmp-equal-tmp0, b=nin2, out=jmp-equal-tmp1);
		And(a=jmp-equal-tmp1, b=zr, out=jmp-equal);
		
		And(a=instruction[0], b=instruction[1], out=jmp-greater-equal-tmp0); // jmp if greater than or equal to
		And(a=jmp-greater-equal-tmp0, b=nin2, out=jmp-greater-equal-tmp1);
		Not(in=ng, out=nng);
		Or(a=zr, b=nng, out=greater-equal);
		And(a=jmp-greater-equal-tmp1, b=greater-equal, out=jmp-greater-equal);
		
		And(a=nin0, b=nin1, out=jmp-less-tmp0); // jmp if less than zero
		And(a=jmp-less-tmp0, b=instruction[2], out=jmp-less-tmp1);
		Not(in=zr, out=nzr);
		And(a=nzr, b=ng, out=less-than);
		And(a=jmp-less-tmp1, b=less-than, out=jmp-less);

		And(a=instruction[0], b=nin1, out=jmp-not-equal-tmp0); // jmp if not equal to zero
		And(a=jmp-not-equal-tmp0, b=instruction[2], out=jmp-not-equal-tmp1);
		And(a=jmp-not-equal-tmp1, b=nzr, out=jmp-not-equal);

		And(a=nin0, b=instruction[1], out=jmp-less-equal-tmp0); // jmp if less than or equal to zero
		And(a=jmp-less-equal-tmp0, b=instruction[2], out=jmp-less-equal-tmp1);
		Or(a=zr, b=ng, out=less-equal);
		And(a=jmp-less-equal-tmp1, b=less-equal, out=jmp-less-equal);

		And(a=instruction[0], b=instruction[1], out=unconditional-tmp); // unconditional jmp
		And(a=unconditional-tmp, b=instruction[2], out=unconditional);

		Or(a=jmp-greater-than, b=jmp-equal, out=jmpt0);
		Or(a=jmpt0, b=jmp-greater-equal, out=jmpt1);
		Or(a=jmpt1, b=jmp-less, out=jmpt2);
		Or(a=jmpt2, b=jmp-not-equal, out=jmpt3);
		Or(a=jmpt3, b=jmp-less-equal, out=jmpt4);
		Or(a=jmpt4, b=unconditional, out=jmpt5);
		And(a=instruction[15], b=jmpt5, out=jmp);

		Not(in=jmp, out=njmp);
// --------------------------------------------------------

		PC(in=a-register-out, load=jmp, inc=njmp, reset=reset, out[0..14]=pc, out[15]=throwaway);

}
